#include <stdio.h>
#include <time.h>       // for clock_t, clock(), CLOCKS_PER_SEC
#include <stdlib.h>
#include <limits.h>
#include <unistd.h>

#define N 100000

void test(float* A, const float* B) {
   printf("Test function\n");

   // make sure to map the memory here to avoid unnecessary I/O from copy data back and forth
   // inside the outer loop when spawning the kernels
   #pragma omp target data map(to: B[0:N]) map(tofrom: A[0:N])
   {
   for (int j = 0; j < N/1000; j++) {
     #pragma omp target teams distribute parallel for num_teams(16)
     for (int i = 0;i < N; i++) {
       A[i] = A[i] + B[i];
     }
   }
   }
}

int main(){

   // to store execution time of code

   srand(time(0));
   float* A = malloc(N*sizeof(float));
   float* B = malloc(N*sizeof(float));

   clock_t t = clock();
   // initialise A & B
   for (int i = 0; i < N; i++)
        A[i] = (float) i;
	B[0] = 0.0;
   for (int i = 0; i < N; i++){
        float C = B[i];
        for (int j = 0; j < i; j++)
            B[j] = C + A[j];
   }

   clock_t t1 = clock() - t;
   printf("Time elapsed (init) is %e seconds (%d,%e)\n", ((double) t1) / CLOCKS_PER_SEC , N, A[2]);

   // calculate result
   test(A,B);

   t = clock() - t - t1;
   printf("Time elapsed (test) is %e seconds (%d,%e)\n", ((double) t) / CLOCKS_PER_SEC , N, A[2]);
   printf("Time elapsed (total) is %e seconds\n", ((double) (t + t1)) / CLOCKS_PER_SEC);

   return 0;

}
